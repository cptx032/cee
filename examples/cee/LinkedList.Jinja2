{%- block includes %}
#include <stdlib.h>
#include <stdbool.h>
{%- if include_list %}
{%- for include_item in include_list %}
{{ include_item }}
{%- endfor %}
{%- endif %}
{%- endblock %}

#ifndef __{{ name | upper }}
#define __{{ name | upper }}

typedef struct {{ name }}
{
    {%- for field in fields %}
    {{ field.type }} {{ field.name }};
    {%- endfor %}

    struct {{ name }} *next;
    struct {{ name }} *first;
    struct {{ name }} *last;
    int length;
} {{ name }};


bool {{ name | lower}}_is_empty({{ name }} *start)
{
    return start->first->length == 0;
}

{% block object_creation %}
{{ name }} *{{ name|lower }}_new()
{
{%- with var_name="new_"+name.lower() %}
    {{ name }} *{{ var_name }} = malloc(sizeof({{ name }}));
    {{ var_name }}->value = NULL;

    {{ var_name }}->next = NULL;
    {{ var_name }}->first = {{ var_name }};
    {{ var_name }}->last = {{ var_name }};
    {{ var_name }}->length = 0;
    return {{ var_name }};
{%- endwith %}
}
{% endblock %}

{{ name }} *{{ name|lower }}_append(
    {{ name }} *start,
    {%- for field in fields %}
    {{ field.type }} {{ field.name }}{% if not loop.last %},{% endif %}
    {%- endfor %}
)
{
    {%- if not allow_nulls %}
    {%- for field in fields %}
    if ({{ field.name }} == NULL)
    {
        return NULL;
    }
    {%- endfor %}
    {%- endif %}

    if ({{ name|lower }}_is_empty(start))
    {
        start->value = value;

        start->next = NULL;
        start->last = start;
        start->first = start;
        start->length++;
        return start;
    }

    start->length++;

    {{ name }} *new_node = {{ name|lower }}_new();
    new_node->value = value;
    new_node->first = start;

    start->last->next = new_node;
    start->last = new_node;
    return new_node;
}

#endif

